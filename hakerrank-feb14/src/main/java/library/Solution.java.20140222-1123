package library;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Solution {

	private static int numberOfTestCases;
	private static TestCase[] testCases;

	private static class TestCase {
		public int numberOfShelves;
		public short[] shelves;
		public int numberOfQueries;
		public String[] queries;
	}

	private static void parseInput(String[] args) {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					System.in));

			String input = br.readLine();
			numberOfTestCases = Integer.valueOf(input);
			testCases = new TestCase[numberOfTestCases];

			int count = 0;
			while (count < numberOfTestCases) {
				TestCase tc = new TestCase();
				input = br.readLine();
				tc.numberOfShelves = Integer.valueOf(input);
				tc.shelves = new short[tc.numberOfShelves];

				input = br.readLine();
				String[] shelves = input.split(" ");
				for (int i = 0; i < shelves.length; i++) {
					tc.shelves[i] = Short.valueOf(shelves[i]);
				}

				input = br.readLine();
				tc.numberOfQueries = Integer.valueOf(input);
				tc.queries = new String[tc.numberOfQueries];

				int queriesCount = 0;
				while (queriesCount < tc.numberOfQueries) {
					input = br.readLine();
					tc.queries[queriesCount++] = input;
				}

				testCases[count++] = tc;
			}
		} catch (IOException io) {
			io.printStackTrace();
		}
	}

	private static class Node {
		private int shelveNumber;
		private short numberOfBooks;
		private Node left;
		private Node right;

		public Node(int shelveNumber, short numberOfBooks) {
			this.numberOfBooks = numberOfBooks;
			this.shelveNumber = shelveNumber;
		}

		public void add(Node node) {
			if (node.numberOfBooks < numberOfBooks) {
				if (left == null) {
					left = node;
				} else {
					left.add(node);
				}
			} else {
				if (right == null) {
					right = node;
				} else {
					right.add(node);
				}
			}
		}

		public short findKthSmallest(int x, int y, int k) {
			if (left != null) {
				return left.findKthSmallest(x, y, k);
			}

			if (shelveNumber >= x && shelveNumber <= y) {
				k--;
			}

			if (k <= 0) {
				return numberOfBooks;
			}

			if (right != null) {
				return right.findKthSmallest(x, y, k);
			}

			return -1;
		}

		public String toString() {
			return "[shelveNumber: " + shelveNumber + ", numberOfBooks: "
					+ numberOfBooks + ", left: "
					+ (left == null ? "null" : left.shelveNumber) + ", right: "
					+ (right == null ? "null" : right.shelveNumber) + "]";
		}

	}

	private static void mock() {
		numberOfTestCases = 2;
		testCases = new TestCase[numberOfTestCases];

		TestCase tc0 = new TestCase();
		tc0.numberOfShelves = 2;
		tc0.shelves = new short[] { 1, 2 };
		tc0.numberOfQueries = 2;
		tc0.queries = new String[] { "0 1 2 1", "0 1 2 2" };
		testCases[0] = tc0;

		TestCase tc1 = new TestCase();
		tc1.numberOfShelves = 4;
		tc1.shelves = new short[] { 4, 3, 2, 1 };
		tc1.numberOfQueries = 4;
		tc1.queries = new String[] { "0 1 1 1", "1 1 1", "0 1 1 1", "0 1 4 3" };
		testCases[1] = tc1;
	}

	private static Node createTree(short[] array) {
		Node root = new Node(1, array[0]);
		if (array.length > 1) {
			for (int i = 1; i < array.length; i++) {
				root.add(new Node(i + 1, array[i]));
			}
		}
		return root;
	}

	public static void main(String[] args) {
		// parseInput(args);
		mock();
		for (TestCase tc : testCases) {
			Node root = createTree(tc.shelves);

			for (String query : tc.queries) {
				if (query.startsWith("1")) {
					String[] split = query.split(" ");
					int x = Integer.valueOf(split[1]);
					short k = Short.valueOf(split[2]);
					tc.shelves[x - 1] = k;
					root = createTree(tc.shelves);
				}

				if (query.startsWith("0")) {
					String[] split = query.split(" ");
					int x = Integer.valueOf(split[1]);
					int y = Integer.valueOf(split[2]);
					int k = Integer.valueOf(split[3]);

					short result = root.findKthSmallest(x, y, k);
					System.out.println(result);
				}
			}
		}
	}

}